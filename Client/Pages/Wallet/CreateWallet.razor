@page "/wallet/create_wallet"
@using System.Text.Json;
@inject HttpClient HttpClient
@inject ISnackbar Snackbar
@inject AuthService authService

<PageTitle>Create wallet</PageTitle>

<MudGrid Class="d-flex align-center justify-center mud-width-full py-4">
    <MudPaper Class="pa-4">
        <MudText Align="Align.Center" Class="mb-n4">Create wallet</MudText>
        <br/>
        <MudForm @bind-IsValid="@success">
            <MudSelect T="string" @bind-Value="WalletType" RequiredError="Type is required!" Label="Type" AnchorOrigin="Origin.BottomCenter">
                @if (walletTypes != null)
                {
                    foreach (var item in walletTypes)
                    {
                        <MudSelectItem T="string" Value="@item.Id">@item.TypeName</MudSelectItem>
                    }
                }
            </MudSelect>
            <MudTextField @bind-Value="AmountValue" Label="Amount" Required="true" RequiredError="Amount is required!" />
            <MudSelect T="string" @bind-Value="CurrencyCode" RequiredError="Currency is required!" Label="Currency" AnchorOrigin="Origin.BottomCenter">
                @if (currencies != null)
                {
                    foreach (var item in currencies)
                    {
                        <MudSelectItem T="string" Value="@item.CurrencyCode">@item.Name</MudSelectItem>
                    }
                }
            </MudSelect>
            <br/>
            <div class="d-flex align-center justify-space-between">
                <MudButton Disabled="@(!success)" Variant="Variant.Text" Class="ml-auto" Color="Color.Primary" OnClick="() => CreateNewWallet()">Create</MudButton>
            </div>
        </MudForm>
    </MudPaper>
</MudGrid>


@code {
    List<CurrencyDTO> currencies;
    List<WalletTypeDTO> walletTypes;
    bool success;
    public string WalletType { get; set; }
    public decimal AmountValue { get; set; }
    public string CurrencyCode { get; set; }

    async Task CreateNewWallet()
    {
        var newWallet = new CreateWalletDTO
            {
                Type = WalletType,
                Amount = AmountValue,
                CurrencyCode = CurrencyCode,
                UserId = await authService.GetUserId()
            };

        var content = new StringContent(JsonSerializer.Serialize(newWallet), System.Text.Encoding.UTF8, "application/json");
        var response = await HttpClient.PostAsync("/api/wallet", content);

        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add("The wallet was created", Severity.Success);
        }
        else
        {
            Snackbar.Add("Error! The wallet was not created", Severity.Error);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        currencies = await HttpClient.GetFromJsonAsync<List<CurrencyDTO>>($"/api/currencies");
        walletTypes = await HttpClient.GetFromJsonAsync<List<WalletTypeDTO>>($"/api/type");
    }
}
