@page "/wallet"
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject AuthService authService

<PageTitle>All wallets</PageTitle>

<MudTable Items="@wallets" T="WalletDTO" OnRowClick="OnRowClick">
    <ToolBarContent>
        <MudText Typo="Typo.h6">All wallets</MudText>
        <MudSpacer />
        <MudIconButton Href="/wallet/create_wallet" Icon="@Icons.Material.Filled.Add" aria-label="create wallet"></MudIconButton>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Code</MudTh>
        <MudTh>Type</MudTh>
        <MudTh>Amount</MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>**** @context.Code.Substring(12, 4)</MudTd>
        <MudTd>@context.Type</MudTd>
        <MudTd>@context.Amount @context.Currency</MudTd>
        <MudTd DataLabel="Nr">
            @if (!context.MainWallet)
            {
                <MudButton Color="Color.Error" OnClick="@((e) => DeactivateWallet(context.Id))">Sterge</MudButton>
            }
        </MudTd>
    </RowTemplate>
</MudTable>

@code {
    List<WalletDTO> wallets;
    private string userId;
    private string deleteWalletError = string.Empty;

    void OnRowClick(TableRowClickEventArgs<WalletDTO> args)
    {
        NavigationManager.NavigateTo("/wallet/" + args.Item.Id);
    }

    public async Task DeactivateWallet(string id)
    {
        var result = await this.HttpClient.PutAsJsonAsync("api/wallet/deactivate", id);

        if (result.IsSuccessStatusCode)
        {
            await GetWallets();
            deleteWalletError = string.Empty;
        }
        else
        {
            deleteWalletError = await result.Content.ReadAsStringAsync();
        }

        StateHasChanged();
    }

    public async Task GetWallets() => wallets = await this.HttpClient.GetFromJsonAsync<List<WalletDTO>>($"/api/wallet/getwallets/{userId}");

    protected override async Task OnInitializedAsync()
    {
        userId = await authService.GetUserId();
        if (userId == null)
            NavigationManager.NavigateTo("/");
        else
            await GetWallets();
    }
}