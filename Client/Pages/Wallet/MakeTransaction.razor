@page "/wallet/transaction"
@using System.Text.Json;
@inject HttpClient HttpClient
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject AuthService authService

<PageTitle>Make Transaction</PageTitle>

<MudGrid Class="d-flex align-center justify-center mud-width-full py-4">
    <MudPaper Class="pa-4">
        <MudText Align="Align.Center" Class="mb-n4">Make Transaction</MudText>
        <br />
        <MudForm @bind-IsValid="@success">
            <MudSelect T="string" @bind-Value="Code" RequiredError="Wallet is required!" Label="Wallet" AnchorOrigin="Origin.BottomCenter">
                @if (wallets != null)
                {
                    foreach (var item in wallets)
                    {
                        <MudSelectItem T="string" Value="@item.Code">@item.Code</MudSelectItem>
                    }
                }
            </MudSelect>
            <MudTextField @bind-Value="WalletCode" Label="Wallet Code" Required="true" RequiredError="Wallet is required!" />
            <MudNumericField HideSpinButtons="true" @bind-Value="AmountValue" Required="true" RequiredError="Type is required!" Label="Amount" Variant="Variant.Text" Min="1"/>
            <MudSelect T="CurrencyDTO" @bind-Value="Currency" RequiredError="Currency is required!" Label="Currency" AnchorOrigin="Origin.BottomCenter">
                @if (currencies != null)
                {
                    foreach (var item in currencies)
                    {
                        <MudSelectItem T="CurrencyDTO" Value="@item">@item.Name</MudSelectItem>
                    }
                }
            </MudSelect>
            <br />
            <div class="d-flex align-center justify-space-between">
                <MudButton Disabled="@(!success)" Variant="Variant.Text" Class="ml-auto" Color="Color.Primary" OnClick="() => CreateNewWallet()">Make</MudButton>
            </div>
        </MudForm>
    </MudPaper>
</MudGrid>


@code {
    List<CurrencyDTO> currencies;
    List<WalletDTO> wallets;
    bool success;
    public string Code { get; set; }
    public string WalletCode { get; set; }
    public decimal AmountValue { get; set; }
    public CurrencyDTO Currency { get; set; }

    async Task CreateNewWallet()
    {
        var newTransaction = new WalletTransactionDTO
            {
                SenderWalletCode = Code,
                ReceiverWalletCode = WalletCode,
                Amount = AmountValue,
                CurrencyId = new Guid(Currency.Id),
                CurrencyCode = Currency.CurrencyCode
            };

        var content = new StringContent(JsonSerializer.Serialize(newTransaction), System.Text.Encoding.UTF8, "application/json");
        var response = await HttpClient.PostAsync("/api/transaction", content);

        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add("The transaction was made", Severity.Success);
            NavigationManager.NavigateTo("/wallet");
        }
        else
        {
            Snackbar.Add("Error! The transaction was not made", Severity.Error);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        currencies = await HttpClient.GetFromJsonAsync<List<CurrencyDTO>>($"https://localhost:7100/api/currencies");
        var userId = await authService.GetUserId();
        if (userId == null)
            NavigationManager.NavigateTo("/");
        else
            wallets = await HttpClient.GetFromJsonAsync<List<WalletDTO>>($"https://localhost:7100/api/wallet/getwallets/{userId}");
    }
}
